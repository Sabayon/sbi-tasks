#!/bin/bash
set -ex

DOCKER_IMAGES="${DOCKER_IMAGES:-0 0 16 * * *}"

# Docker images
mottainai-cli task compile image_build/docker/multiarch.tmpl \
                            -s SourceRepo=https://github.com/Sabayon/sbi-tasks.git \
                            -s Arch=amd64 \
                            -s Recurring="$DOCKER_IMAGES" \
                            -s Image=sabayon/ci \
                            -s Directory=bots/ \
                            -o bots/docker-image.yaml

mottainai-cli task compile image_build/docker/multiarch.tmpl \
                            -s SourceRepo=https://github.com/MottainaiCI/mottainai-server \
                            -s Arch=amd64 \
                            -s Image=mottainaici/server \
                            -s Directory=/ \
                            -s Recurring="$DOCKER_IMAGES" \
                            -o image_build/docker/mottainai/server-amd64.yaml

mottainai-cli task compile image_build/docker/multiarch.tmpl \
                            -s SourceRepo=https://github.com/MottainaiCI/mottainai-agent \
                            -s Arch=amd64 \
                            -s Image=mottainaici/agent \
                            -s Recurring="$DOCKER_IMAGES" \
                            -s Directory=/ \
                            -o image_build/docker/mottainai/agent-amd64.yaml

mottainai-cli task compile image_build/docker/multiarch.tmpl \
                            -s SourceRepo=https://github.com/MottainaiCI/mottainai-cli \
                            -s Arch=amd64 \
                            -s Image=mottainaici/cli \
                            -s Directory=/ \
                            -s Recurring="$DOCKER_IMAGES" \
                            -o image_build/docker/mottainai/cli-amd64.yaml

mottainai-cli task compile image_build/docker/multiarch.tmpl \
                            -s SourceRepo=https://github.com/Sabayon/docker-spinbase-amd64 \
                            -s Arch=amd64 \
                            -s Squashed=true \
                            -s Image=sabayon/spinbase \
                            -s Recurring="0 0 20 * * *" \
                            -s Directory=/ \
                            -o image_build/docker/spinbase-amd64.yaml

mottainai-cli task compile image_build/docker/multiarch.tmpl \
                            -s SourceRepo=https://github.com/Sabayon/docker-base-amd64 \
                            -s Arch=amd64 \
                            -s Squashed=true \
                            -s Recurring="$DOCKER_IMAGES" \
                            -s Image=sabayon/base \
                            -s Directory=/ \
                            -o image_build/docker/base-amd64.yaml

mottainai-cli task compile image_build/docker/multiarch.tmpl \
                            -s SourceRepo=https://github.com/Sabayon/docker-isobuilder-amd64 \
                            -s Arch=amd64 \
                            -s Recurring="$DOCKER_IMAGES" \
                            -s Image=sabayon/isobuilder \
                            -s Directory=/ \
                            -o image_build/docker/isobuilder-amd64.yaml

mottainai-cli task compile image_build/docker/multiarch.tmpl \
                            -s SourceRepo=https://github.com/Sabayon/docker-builder-amd64 \
                            -s Arch=amd64 \
                            -s Squashed=true \
                            -s Recurring="$DOCKER_IMAGES" \
                            -s Image=sabayon/builder \
                            -s Directory=/ \
                            -o image_build/docker/builder-amd64.yaml

mottainai-cli task compile image_build/docker/multiarch.tmpl \
                            -s SourceRepo=https://github.com/Sabayon/packer-templates \
                            -s Arch=amd64 \
                            -s Recurring="@monthly" \
                            -s Image=sabayon/packer \
                            -s Directory=/ \
                            -o image_build/docker/packer-amd64.yaml

# SCR 

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=mudler \
                            -s Storage=3224462066628783553 \
                            -s Recurring="@daily" \
                            -o scr/mudler.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=community \
                            -s Storage=2154014966644308953 \
                            -s Recurring="@daily" \
                            -o scr/community.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=devel \
                            -s Snapshot=true \
                            -s Storage=7853977132774944695 \
                            -s Recurring="@daily" \
                            -o scr/devel.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=sihnon-common \
                            -s Storage=202372093426954774 \
                            -s Recurring="@daily" \
                            -o scr/sihnon-common.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=sihnon-desktop \
                            -s Storage=9042214114607668711 \
                            -s Recurring="@daily" \
                            -o scr/sihnon-desktop.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=sihnon-server \
                            -s Storage=5710408089339313973 \
                            -s Recurring="@daily" \
                            -o scr/sihnon-server.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=zfs \
                            -s Storage=5988687295295902538 \
                            -s Recurring="@daily" \
                            -o scr/zfs.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=rust \
                            -s Storage=3637167958871677979 \
                            -s Recurring="@daily" \
                            -o scr/rust.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=science \
                            -s Storage=2076548926821985834 \
                            -s Recurring="@daily" \
                            -o scr/science.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=perl \
                            -s Storage=2154014966644308953 \
                            -s Recurring="@daily" \
                            -o scr/perl.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=pantheon-desktop \
                            -s Storage=2154014966644308953 \
                            -s Recurring="@daily" \
                            -o scr/pantheon-desktop.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=haskell \
                            -s Storage=1438512952321344034 \
                            -s Recurring="@daily" \
                            -o scr/haskell.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=gaming-live \
                            -s Storage=4305828396602493158 \
                            -s Recurring="@daily" \
                            -o scr/gaming-live.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=devel-9999 \
                            -s Storage=7853977132774944695 \
                            -s Recurring="@daily" \
                            -o scr/devel-9999.yaml

mottainai-cli task compile scr/repo.tmpl \
                            -s SCRRepo=devel-kernel \
                            -s Recurring="@daily" \
                            -o scr/devel-kernel.yaml
# Bots
for i in "mottainai-cli" "mottainai-agent" "replicant"
do
    mottainai-cli task compile bots/mottainai/vendor-branch-sync.tmpl \
                                -s Component="$i" \
                                -o bots/mottainai/sync-develop-"$i".yaml

    mottainai-cli task compile bots/mottainai/merge-master.tmpl \
                                -s Component="$i" \
                                -o bots/mottainai/merge-master-"$i".yaml
done

mottainai-cli task compile bots/mottainai/merge-master.tmpl \
                            -s Component=mottainai-server \
                            -o bots/mottainai/merge-master-mottainai-server.yaml


## Auto Bump bots
for i in "sabayon-distro" "for-gentoo"
do
mottainai-cli task compile bots/detect-obsoletes/detect-obsoletes.tmpl \
                            -s OverlayName=$i \
                            -s Recurring= \
                            -s UpstreamOrg=Sabayon \
                            -o bots/detect-obsoletes/detect-obsoletes-amd64-$i.yaml

mottainai-cli task compile bots/auto-bump/auto-bumper.tmpl \
                            -s OverlayName=$i \
                            -s Recurring=@weekly \
                            -s UpstreamOrg=Sabayon \
                            -o bots/auto-bump/auto-bump-$i.yaml
done

mottainai-cli task compile bots/ebuild-maint/scan-forked.tmpl \
                            -s OverlayName=sabayon-distro \
                            -s UpstreamOrg=Sabayon \
                            -o bots/ebuild-maint/scan-forked-sabayon-distro.yaml


mottainai-cli task compile bots/ebuild-maint/scan-forked.tmpl \
                            -s OverlayName=for-gentoo \
                            -s UpstreamOrg=Sabayon \
                            -o bots/ebuild-maint/scan-forked-for-gentoo.yaml

# LXD tasks
for i in "sabayon-base" "sabayon-builder" "sabayon-isobuilder"
do
  mottainai-cli task compile lxd/lxd-image.tmpl \
                            -s Image=${i/-/\/} \
                            -s ImageProduct="$i:current:amd64:default" \
                            -s ImageDir=$i \
                            -s LxdImageNamespace=lxd-$i \
                            -o lxd/$i/task.yaml
done

# Create LXD Pipeline file
# Temporary disable until mottainai-cli is tagged.
# mottainai-cli task compile lxd/lxd-pipeline.tmpl \
#                            -l lxd/lxd-images.tmpl.values \
#                            -o lxd/lxd-pipeline.yaml


# ISO Daily tasks
for i in "spinbase" "gnome" "kde" "lxqt" "mate" "minimal" "server" "tarball" "xfce"
do
mottainai-cli task compile iso/iso_build.tmpl \
                            -s IsoImage=$i \
                            -s IsoDev=false \
                            -s TaskType=docker \
                            -s IsoName="${i^}" \
                            -o iso/$i/iso_build.yaml

done

# ISO Daily Dev tasks
for i in "spinbase" "gnome" "kde" "lxqt" "mate" "minimal" "server" "tarball" "xfce"
do
mottainai-cli task compile iso/iso_build.tmpl \
                            -s IsoImage=$i \
                            -s IsoDev=true \
                            -s TaskType=docker \
                            -s IsoName="${i^}" \
                            -o iso-dev/$i/iso_build.yaml

done

# ISO Daily Pipeline
# mottainai-cli task compile iso/pipeline.tmpl \
#                            -l iso/iso-images.tmpl.values \
#                            -o iso/pipeline-isos-daily.yml


# ARM Repositories

# Core ARM Repository
# TODO: read number of staging from files with shyml
core_arm_stages=4
core_injector_sources="core-arm"
core_staging_list=""
for ((i=1;i<=${core_arm_stages};i++)) ; do
  staging="staging${i}"
  if [ $i -eq 1 ] ; then
    core_staging_list="${staging}"
  else
    core_staging_list="${core_staging_list} ${staging}"
  fi
  # Create SARK build file.
  mottainai-cli task compile next/arm/repo-build.tmpl \
    -l next/arm/core/build-staging.tmpl.values \
    -s StagingPhase="${staging}" \
    -o next/arm/core/core-build-${staging}.yml
  core_injector_sources="${core_injector_sources},core-arm-${staging}"

  # Create Mottainai task
  mottainai-cli task compile next/arm/repo-staging.tmpl \
    -l next/arm/core/build-staging.tmpl.values \
    -s TaskTarget="${staging^}" \
    -s StagingPhase="${staging}" \
    -s LxdType=true \
    -o next/arm/core/core-${staging}.yaml
done

# Core ARM Injector task
mottainai-cli task compile next/arm/repo-injector.tmpl \
    -l next/arm/core/build-staging.tmpl.values \
    -s StagingPhase="staging1" \
    -s ArmQueue="arm_injector" \
    -s StagingDirs="${core_staging_list}" \
    -s InjectorSources="${core_injector_sources}" \
    -o next/arm/core/core-eit-injector-task.yaml

# Core ARM Pipeline
mottainai-cli task compile next/arm/pipeline.tmpl \
    -l next/arm/core/build-staging.tmpl.values \
    -s ArmQueueInjector="arm_injector" \
    -s LxdTypeStaging=true \
    -s StagingDirs="${core_staging_list}" \
    -s InjectorSources="${core_injector_sources}" \
    -o next/arm/core/core-pipeline.yaml

# Base ARM Repository
# TODO: read number of staging from files with shyml
base_arm_stages=8
base_injector_sources="base-arm"
base_staging_list=""
for ((i=1;i<=${base_arm_stages};i++)) ; do
  staging="staging${i}"
  if [ $i -eq 1 ] ; then
    base_staging_list="${staging}"
  else
    base_staging_list="${base_staging_list} ${staging}"
  fi
  # Create SARK build file.
  mottainai-cli task compile next/arm/repo-build.tmpl \
    -l next/arm/base/repo.tmpl.values \
    -s StagingPhase="${staging}" \
    -o next/arm/base/base-build-${staging}.yml
  base_injector_sources="${base_injector_sources},base-arm-${staging}"

  # Create Mottainai task
  mottainai-cli task compile next/arm/repo-staging.tmpl \
    -l next/arm/base/repo.tmpl.values \
    -s TaskTarget="${staging^}" \
    -s TargetRepoName="Base" \
    -s StagingPhase="${staging}" \
    -s LxdType=true \
    -o next/arm/base/base-${staging}.yaml
done

# Base ARM Injector task
mottainai-cli task compile next/arm/repo-injector.tmpl \
    -l next/arm/base/repo.tmpl.values \
    -s ArmQueue="arm_injector" \
    -s TargetRepoName="Base" \
    -s StagingPhase="staging1" \
    -s StagingDirs="${base_staging_list}" \
    -s InjectorSources="${base_injector_sources}" \
    -o next/arm/base/base-eit-injector-task.yaml

# Base ARM Pipeline
mottainai-cli task compile next/arm/pipeline.tmpl \
    -l next/arm/base/repo.tmpl.values \
    -s ArmQueueInjector="arm_injector" \
    -s LxdTypeStaging=true \
    -s StagingDirs="${base_staging_list}" \
    -s InjectorSources="${base_injector_sources}" \
    -o next/arm/base/base-pipeline.yaml

# Net ARM Repository
# TODO: read number of staging from files with shyml
net_arm_stages=4
net_injector_sources="net-arm"
net_staging_list=""
for ((i=1;i<=${net_arm_stages};i++)) ; do
  staging="staging${i}"
  if [ $i -eq 1 ] ; then
    net_staging_list="${staging}"
  else
    net_staging_list="${net_staging_list} ${staging}"
  fi
  # Create SARK build file.
  mottainai-cli task compile next/arm/repo-build.tmpl \
    -l next/arm/net/repo.tmpl.values \
    -s StagingPhase="${staging}" \
    -o next/arm/net/net-build-${staging}.yml
  net_injector_sources="${net_injector_sources},net-arm-${staging}"

  # Create Mottainai task
  mottainai-cli task compile next/arm/repo-staging.tmpl \
    -l next/arm/net/repo.tmpl.values \
    -s TaskTarget="${staging^}" \
    -s TargetRepoName="Net" \
    -s StagingPhase="${staging}" \
    -s LxdType=true \
    -o next/arm/net/net-${staging}.yaml
done

# Net ARM Injector task
mottainai-cli task compile next/arm/repo-injector.tmpl \
    -l next/arm/net/repo.tmpl.values \
    -s ArmQueue="arm_injector" \
    -s TargetRepoName="Net" \
    -s StagingPhase="staging1" \
    -s StagingDirs="${net_staging_list}" \
    -s InjectorSources="${net_injector_sources}" \
    -o next/arm/net/net-eit-injector-task.yaml

# Net ARM Pipeline
mottainai-cli task compile next/arm/pipeline.tmpl \
    -l next/arm/net/repo.tmpl.values \
    -s ArmQueueInjector="arm_injector" \
    -s LxdTypeStaging=true \
    -s StagingDirs="${net_staging_list}" \
    -s InjectorSources="${net_injector_sources}" \
    -o next/arm/net/net-pipeline.yaml

# Sabayon ARM Repository
# TODO: read number of staging from files with shyml
sabayon_arm_stages=1
sabayon_injector_sources="sabayon-arm"
sabayon_staging_list=""
for ((i=1;i<=${sabayon_arm_stages};i++)) ; do
  staging="staging${i}"
  if [ $i -eq 1 ] ; then
    sabayon_staging_list="${staging}"
  else
    sabayon_staging_list="${sabayon_staging_list} ${staging}"
  fi
  # Create SARK build file.
  mottainai-cli task compile next/arm/repo-build.tmpl \
    -l next/arm/sabayon/repo.tmpl.values \
    -s StagingPhase="${staging}" \
    -o next/arm/sabayon/sabayon-build-${staging}.yml
  sabayon_injector_sources="${sabayon_injector_sources},sabayon-arm-${staging}"

  # Create Mottainai task
  mottainai-cli task compile next/arm/repo-staging.tmpl \
    -l next/arm/sabayon/repo.tmpl.values \
    -s TaskTarget="${staging^}" \
    -s TargetRepoName="Sabayon" \
    -s StagingPhase="${staging}" \
    -s LxdType=true \
    -o next/arm/sabayon/sabayon-${staging}.yaml
done

# Sabayon ARM Injector task
mottainai-cli task compile next/arm/repo-injector.tmpl \
    -l next/arm/sabayon/repo.tmpl.values \
    -s ArmQueue="arm_injector" \
    -s TargetRepoName="Sabayon" \
    -s StagingPhase="staging1" \
    -s StagingDirs="${sabayon_staging_list}" \
    -s InjectorSources="${sabayon_injector_sources}" \
    -o next/arm/sabayon/sabayon-eit-injector-task.yaml

# Sabayon ARM Pipeline
mottainai-cli task compile next/arm/pipeline.tmpl \
    -l next/arm/sabayon/repo.tmpl.values \
    -s ArmQueueInjector="arm_injector" \
    -s LxdTypeStaging=true \
    -s StagingDirs="${sabayon_staging_list}" \
    -s InjectorSources="${sabayon_injector_sources}" \
    -o next/arm/sabayon/sabayon-pipeline.yaml

